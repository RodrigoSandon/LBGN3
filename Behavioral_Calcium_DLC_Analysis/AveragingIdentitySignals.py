import os, glob
import pandas as pd
from scipy import stats
import matplotlib.pyplot as plt
from pathlib import Path
from typing import List
from csv import writer
import math

def find_paths(root_path: Path, middle: str, endswith: str) -> List[str]:
    files = glob.glob(
        os.path.join(root_path, "**", middle, "**", endswith), recursive=True,
    )
    return files

def find_paths_conditional_endswith(
    root_path, og_lookfor: str, cond_lookfor: str
) -> list:

    all_files = []

    for root, dirs, files in os.walk(root_path):

        if cond_lookfor in files:
            # acquire the trunc file
            file_path = os.path.join(root, cond_lookfor)
            # print(file_path)
            all_files.append(file_path)
        elif cond_lookfor not in files:
            # acquire the og lookfor
            file_path = os.path.join(root, og_lookfor)
            all_files.append(file_path)

    return all_files


class Cell:
    def __init__(
        self,
        dff_trace: list,
        number_cells,
        base_lower_bound_time,
        base_upper_bound_time,
        lower_bound_time,
        upper_bound_time,
        reference_pair,
        hertz,
        alpha,
    ):

        self.number_cells = number_cells
        self.base_lower_bound_time = base_lower_bound_time
        self.base_upper_bound_time = base_upper_bound_time
        self.lower_bound_time = lower_bound_time
        self.upper_bound_time = upper_bound_time
        self.reference_pair = reference_pair
        self.hertz = hertz
        self.alpha = alpha

        self.dff_trace = dff_trace
        self.id = self.wilcoxon_analysis()

    def convert_secs_to_idx(
        self, unknown_time_min, unknown_time_max, reference_pair: dict, hertz: int
    ):
        reference_time = list(reference_pair.keys())[0]  # has to come from 0
        reference_idx = list(reference_pair.values())[0]

        idx_start = (unknown_time_min * hertz) + reference_idx

        idx_end = (unknown_time_max * hertz) + reference_idx  # exclusive
        return int(idx_start), int(idx_end)

    def create_subwindow_of_list(
        self, lst: list, unknown_time_min, unknown_time_max
    ) -> list:
        idx_start, idx_end = self.convert_secs_to_idx(
            unknown_time_min, unknown_time_max, self.reference_pair, self.hertz
        )

        subwindow_lst = lst[idx_start:idx_end]
        return subwindow_lst

    def wilcoxon_analysis(self):

        sub_df_baseline_lst = self.create_subwindow_of_list(
            self.dff_trace,
            unknown_time_min=self.base_lower_bound_time,
            unknown_time_max=self.base_upper_bound_time,
        )

        sub_df_lst = self.create_subwindow_of_list(
            self.dff_trace,
            unknown_time_min=self.lower_bound_time,
            unknown_time_max=self.upper_bound_time,
        )

        if (sub_df_baseline_lst == sub_df_lst) == True:
            return "null"
        try:
            result_greater = stats.mannwhitneyu(
                sub_df_lst, sub_df_baseline_lst, alternative="greater"
            )

            result_less = stats.mannwhitneyu(
                sub_df_lst, sub_df_baseline_lst, alternative="less"
            )
        except ValueError:
            print(sub_df_baseline_lst)
            print(sub_df_lst)

        id = None
        if result_greater.pvalue < (self.alpha / self.number_cells):
            id = "+"
        elif result_less.pvalue < (self.alpha / self.number_cells):
            id = "-"
        else:
            id = "Neutral"

        return id

    def zscore(self, obs_value, mu, sigma):
        return (obs_value - mu) / sigma

    def custom_standardize(
        self, dff_traces: list, norm_base_min, norm_base_max
    ) -> list:

        subwindow = self.create_subwindow_of_list(
            dff_traces, norm_base_min, norm_base_max
        )
        mean_for_cell = stats.tmean(subwindow)
        stdev_for_cell = stats.tstd(subwindow)

        new_dff_traces = []
        for ele in dff_traces:
            z_score = self.zscore(ele, mean_for_cell, stdev_for_cell)
            new_dff_traces.append(z_score)

        return new_dff_traces


def main():
    ROOT = r"/media/rory/Padlock_DT/BLA_Analysis/BetweenMiceAlignmentData"
    to_look_for = "all_concat_cells_z_fullwindow.csv"
    if_folder_includes_this_process_this_instead = "all_concat_cells_z_pre_truncated.csv"
    out_filename = "sorted_traces_z_err_-10_-5_1_4"

    """files = find_paths_conditional_endswith(
        ROOT, to_look_for, if_folder_includes_this_process_this_instead
    )"""

    list_of_sessions = ["Pre-RDT RM", "RDT D1", "RDT D2", "RDT D3"]
    
    for i in list_of_sessions:
        print(i)
        files = find_paths(ROOT, i, to_look_for)
        """files : list
        files = find_paths_conditional_endswith(
        ROOT, to_look_for, if_folder_includes_this_process_this_instead
        )"""
        
        for csv in files:
            # print(csv)
            try:
                if "Shock Test" not in csv:
                    base_lower_bound_time = -10
                    base_upper_bound_time = -5
                    lower_bound_time = 1
                    upper_bound_time = 4
                    reference_pair = {0: 100}

                    # for normalizing ater averaging
                    norm_base_min = -10
                    norm_base_max = -1
                elif "Shock Test" in csv:
                    base_lower_bound_time = -3
                    base_upper_bound_time = 0
                    lower_bound_time = 0
                    upper_bound_time = 3
                    reference_pair = {0: 50}

                    # for normalizing ater averaging
                    norm_base_min = -5
                    norm_base_max = 0

                hertz = 10
                alpha = 0.01

                #try:
                df = pd.read_csv(csv)
                print(csv)
                print(len(df))
                number_cells = len(list(df.columns))

                out_path = "/".join(csv.split("/")[:-1]) + f"/{out_filename}.png"
                
                # print(out_path)

                # dict of lists of lists of dff_traces, would later be avg dff traces
                d = {"+": [], "-": [], "Neutral": []}
                d_description = {
                    "+": {
                        "mean":[],
                        "sem":[]
                    }, 
                    "-": {
                        "mean":[],
                        "sem":[]
                    }, 
                    "Neutral": {
                        "mean":[],
                        "sem":[]
                        }
                }

                # loop through this csv
                for count, col in enumerate(list(df.columns)):
                    if col == "BLA-Insc-1_C20" or col == "BLA-Insc-1_C21" or col == "BLA-Insc-7_C04" or col == "BLA-Insc-7_C05": #NUANCES
                        pass
                    else:
                        dff_traces = list(df[col])
                        # NUANCE: OMITTING CELL 4 FROM BLA 7 FOR NOW 3/22/22
                        #print(col)
                        cell = Cell(
                            dff_traces,
                            number_cells,
                            base_lower_bound_time,
                            base_upper_bound_time,
                            lower_bound_time,
                            upper_bound_time,
                            reference_pair,
                            hertz,
                            alpha,
                        )
                        
                        # now have id for this cell in csv
                        if cell.id == "+":
                            d["+"].append(dff_traces)
                        elif cell.id == "-":
                            d["-"].append(dff_traces)
                        elif cell.id == "Neutral":
                            d["Neutral"].append(dff_traces)

                # Now have all cells sorted, find avg of lists of lists
                for key in d.keys():
                    # print(*d[key], sep="\n")
                    num_traces_in_list = len(d[key])
                    """print(
                        num_traces_in_list
                    )  # should add up to the num of total cells in that csv"""
                    # in which it does
                    zipped_dff_traces = zip(*d[key])
                    # d[key] is a list of lists

                    """for_printing = zip(*d[key])
                    print(list(for_printing)[0])"""

                    avg_dff_traces = []

                    for index, tuple in enumerate(zipped_dff_traces):
                        
                        avg = sum(list(tuple)) / num_traces_in_list
                        sem = stats.tstd(list(tuple))/(math.sqrt(num_traces_in_list))
                        avg_dff_traces.append(avg)

                        d_description[key]["mean"].append(avg)
                        d_description[key]["sem"].append(sem)
                        

                    """d[key] = cell.custom_standardize(
                        avg_dff_traces, norm_base_min, norm_base_max
                    )"""

                    d[key] = avg_dff_traces

                out_path_csv = out_path.replace(f"{out_filename}.png", f"{out_filename}.csv")

                new_d = {}
                for key_1 in d_description:
                    for key_2 in d_description[key_1]:
                        new_key = f"{key_1}_{key_2}"
                        new_d[new_key] = d_description[key_1][key_2]

                d_description_df = pd.DataFrame(dict([ (k,pd.Series(v)) for k,v in new_d.items() ]))
                d_description_df.to_csv(out_path_csv, index=False)
                
                for key in d.keys():
                    plt.plot(list(df.index), d_description[key]["mean"], label=key)
                    difference_1 = [d_description[key]["mean"][idx] - d_description[key]["sem"][idx] for idx,i in enumerate(d_description[key]["mean"])]
                    difference_2 = [d_description[key]["mean"][idx] + d_description[key]["sem"][idx] for idx,i in enumerate(d_description[key]["mean"])]
                    plt.fill_between(list(df.index), difference_1, difference_2)

                plt.title(f"Z-Score of Averaged dF/F Cell Identities (n={number_cells})")
                plt.locator_params(axis="x", nbins=20)
                plt.xlabel("Time (s)")
                plt.ylabel("Z-Score")
                plt.legend()
                plt.savefig(out_path)
                plt.close()
                # break

            except Exception as e:
                print(e)
                pass

def main2():

    file = "/media/rory/Padlock_DT/BLA_Analysis/Results/avg_across_blocks_w_sem_rdtd1.csv"
    df = pd.read_csv(file)
    d = df.to_dict(orient="list")
    #print(d)

    d = {
        "block1" : {
            "mean": [0.015190315918015, 0.009631107233879999, 0.034126418673622996, -0.000208893104541, 0.008066638082534, 0.01020446231026, -0.007678459566294, 0.0018520049031920001, 0.015108924850741001, 0.020312337581783, 0.019282069514532, -0.000684577027305, 0.015579113885906002, 0.013839925188272, 0.015287628665440001, 0.005218791183657001, -0.012015101001455, -0.013458671502033998, -0.00900608076665, 0.012034514930575, 0.001169672987648, 0.012041671927139, 0.005927625119798, 0.014721453581774999, 0.018300815699463003, -0.0020930223848870002, 0.020703241341709, -0.006520556504402, -0.007974307583417, -0.008401749331966, -0.0025610311711769997, -0.014438848485541002, -0.005818373696479, 0.020922172930819, 0.0006722892303709999, 0.022820553238085, 0.008400067421158001, 0.033426940685925, 0.011787892707875001, 0.022756332653052998, 0.028324459970354002, 0.034471204314271, 0.008622027020466, 0.009149571176801, -0.002811837828697, -0.004331441244873, 0.013074977289344999, 0.005501557859175, 0.0045982785644209994, 0.031778088307429, 0.032005364937644, 0.010415488272538, 0.037052376139437, 0.012503496159283999, 0.023989865988244, 0.048084505537455, 0.055890766929162006, 0.058866803142702005, 0.057464351217427004, 0.013892278484626, 0.055172742993183, 0.05108487247429, 0.04437283257384, 0.037192073612097, 0.036577379559321, 0.032492533399971005, 0.05855560243901401, 0.037089163407210995, 0.051750349574449996, 0.040016290729287, 0.04380896493397499, 0.03461003236728501, 0.034000359166919, 0.013097207721132001, 0.020216733631452998, 0.009756763842988002, 0.0070324638778800005, 0.020125168215081, 0.016093146443138, 0.023732968884716002, 0.011218371183513, -0.015761810660472, -0.019361967167608997, -0.029788182745629, -0.013797183743288, -0.015019396629187002, -0.017192485738255003, -0.022418649390075998, -0.051496017973567, -0.03665903650451, 0.0016180243141950001, -0.005305396903614, -0.0007277482915730001, 0.0108439463815, 0.010937004931778, -0.00032891539317100003, 0.012780368682222001, -0.018382290101647998, -0.019363293224351, -0.01888982805954, -0.017478275763132, -0.053344585272567996, -0.102241475955215, -0.105083389529086, -0.088263538774774, -0.048055711380104005, -0.031782898467016, 0.004561463149995999, 0.020501165769152, 0.03556568072487001, 0.058217528062359004, 0.0326670926302, -0.0015089318267270003, 0.006472871958558001, -0.019856029667855, -0.03456420574617399, -0.033934780641883995, -0.043078548368584005, -0.033337917279637995, -0.022583257645200003, -0.036931334901281, -0.026333419256048998, -0.044546750598499, -0.061962958389523995, -0.059781810163514006, -0.05125746414497901, -0.033767843692395, -0.01621827588652, -0.010174666136615999, -0.035616448020645, -0.029437705386562, -0.030018431515721, -0.019380999519759, -0.031140740894997004, -0.010221046221017, -0.032621877301414, -0.022636195720844, -0.025173492747341, -0.030421238080813, 0.008950097188767001, -0.032264598650911, -0.025327095932487997, -0.020589983700367, -0.014729997431861, -0.023164102602712, -0.015649622370751997, -0.006203994265605999, -0.025238254998352, 0.006238973048273, 0.00014107873043900002, -0.027111800757256003, -0.021717485630397996, -0.022981512042375002, -0.006479947652594, -0.011296630133775, 0.000259322680574, -0.001442281585678, 0.026079736520597, -0.0026217944618060003, -0.0018044193942379997, 0.011076533239445, -0.00039524498965300007, 0.034888557155724996, 0.017229655569887002, 0.017221363689646, -0.0036068837809959996, 0.010403954637703001, 0.004378328978503, 0.022971021660849, 0.037824565269943, 0.012556611961038999, 0.007649359048297, 0.009553677479909001, 0.006397566592141999, -0.0008510824381110001, 0.000914640651793, -0.016842725030295, -0.00042422937097099994, 0.016275555226554, -0.014766937464768, -0.003402758849857, -0.001734213786466, -0.007949914091645999, -0.008534611043606, -0.0009008547009310001, -0.003818436310279, -0.014041135433306002, -0.011406373355596999, -0.013290006808578999, -0.018239905230063, -0.0019651378729579998, -0.016988447787662, -0.008052532033, 0.00109284687336, 0.0010407636848999999, -0.007348953175225, 0.002148546606836, 0.001180928306803, 0.020511637430497, 0.014218370161732],
            "sem": [0.02348196807825, 0.022627215927077005, 0.022643119099435, 0.023067972195407994, 0.022288644692007004, 0.022414112064749, 0.022602682078469, 0.022881494892093, 0.022037206907733, 0.021317137122555004, 0.022288034284218, 0.023253720741775005, 0.021992822906624, 0.021770355725753, 0.021766754146363, 0.021106765910015, 0.020715029280458, 0.020588922802927, 0.020543617197475, 0.020410341177979, 0.020156776010099, 0.021058013496381003, 0.021961182047908, 0.0194053894823, 0.020112253291242003, 0.020682564067952998, 0.01885381001186, 0.019890387579104, 0.018861637344738, 0.017945681186103003, 0.018806231034531003, 0.019511762388191002, 0.017089748879703003, 0.017062679125063998, 0.017372235652679, 0.016720122133147, 0.016930208807103, 0.017566493931581002, 0.018884633048846, 0.018057148507634, 0.018678128209733, 0.018956024549488998, 0.019376916001256, 0.019342757703378004, 0.019355385225095, 0.019568459036762003, 0.020438268725643003, 0.020608832491683996, 0.019971123888598, 0.020249182791186, 0.021900325452516006, 0.021793466693311003, 0.022995417262365002, 0.022297175002945, 0.021528853386669, 0.023457788716837, 0.023451047679204, 0.024033555526683997, 0.022934029711235003, 0.024721316369325, 0.02510070940732, 0.02463311450111, 0.025197011052877003, 0.024551438489302996, 0.023504298554722, 0.023771508975356, 0.025027871223534, 0.025201523012871003, 0.025746503263547, 0.026287330594215, 0.027050168084124002, 0.025939705977017995, 0.026259848671714003, 0.02647802769545, 0.025110102480635, 0.02737085348933, 0.026916802457917003, 0.025701279063813, 0.026645656147962004, 0.027518935923593998, 0.028169632355532003, 0.027289217942275, 0.027089878789532004, 0.027353816202917006, 0.028693440921487002, 0.028603895170579, 0.029206546590514998, 0.0285057763172, 0.028875669801642, 0.030162277375325997, 0.029780418433486, 0.030892789386084002, 0.030695836528472003, 0.032808956053695, 0.033442131722797995, 0.035448999665493995, 0.035307635227062005, 0.036041271377514, 0.037184050939639, 0.0393109897988, 0.038013263883871, 0.039311162037171, 0.041302130324, 0.041374811736752996, 0.03859148368621, 0.037580563417832, 0.03753647363684, 0.040109856099867995, 0.038786845091901, 0.042550761901863, 0.04767738984556, 0.047182539532287994, 0.04652163361805799, 0.045636891736367, 0.04390790476094101, 0.04265311107718601, 0.040134775125681, 0.037862184584666, 0.038289093708481, 0.037931206372274005, 0.036370977046126005, 0.037722380828044993, 0.036151474998209004, 0.03571951692653, 0.036308139137687996, 0.03703880794971799, 0.039253749190543995, 0.039591645136424, 0.041340051764048, 0.043148371837119, 0.04538787409867, 0.045881507905104, 0.045945193142553, 0.046782843259295, 0.04677724633855901, 0.045104561688516995, 0.04422777417750799, 0.044436691007485, 0.042354633766214, 0.043218404924367994, 0.042561418432449, 0.041767624832165, 0.04087658711851899, 0.039209230561154995, 0.038428196985098, 0.036570062627213996, 0.036951911690482, 0.035739255585255, 0.035213485799277, 0.033960157330999004, 0.032580096622826, 0.032404606909432004, 0.030430023347159, 0.030944779107893998, 0.028538478548211003, 0.028443215028705, 0.027308578338490003, 0.02775701446899, 0.026164248747741002, 0.025472847687281003, 0.025462623071333998, 0.026191975486073996, 0.027783346649014, 0.026640286326563, 0.027766453933819, 0.026878258190035, 0.027454438215925, 0.026506534502856005, 0.025717353990142997, 0.025439184939277, 0.027413831856769, 0.028807615979001, 0.028656752444041, 0.030470135782672, 0.029141618446791, 0.02967771193771, 0.029715243211437998, 0.030489147466992002, 0.030943291102097998, 0.031704673832072996, 0.030997647090477996, 0.030413822342567003, 0.030261503548656005, 0.029633898258586006, 0.03013347456, 0.030396526431554, 0.030892677963294996, 0.03090609432453, 0.028915591030136998, 0.027470713952962002, 0.028931862751517004, 0.02800671275272, 0.029519608789353998, 0.030331725492041, 0.029102782985997996, 0.030421814125127, 0.029329532347253, 0.029427791244532, 0.029795920030247, 0.03002490283023]
        },
        "block2" : {
            "mean": [0.09057391349947899, 0.06527762211472, 0.077988633585559, 0.08263223648006099, 0.06712299512193, 0.071850153624162, 0.072586114305804, 0.07342038317350999, 0.06514771116575, 0.085972185040526, 0.090975516314134, 0.08607768357867, 0.075589087653557, 0.0624637917995, 0.048516986135196, 0.036820906977242, 0.05236880172698099, 0.06231358724402299, 0.033495533714758, 0.01106447638638, 0.02008071435306, 0.03902812791198101, 0.05934151376060201, 0.059311893108586, 0.051371478273508, 0.078119504735882, 0.057030661607841995, 0.057949665878642, 0.041427605932139, 0.042214636270658, 0.030854839368502005, 0.060058819789252, 0.051378893589719005, 0.041382846109333, 0.04828809618583099, 0.04627821596172799, 0.042853603967162, 0.048597169261264006, 0.063122690608525, 0.049632546125931, 0.060208511497892005, 0.084174197858197, 0.06498452216454301, 0.078612362911081, 0.059233658627624, 0.07111694832663999, 0.054628145918397, 0.050867300002021, 0.035222295538454004, 0.058398810597213, 0.056031794864009006, 0.054507155770718, 0.05114671028338599, 0.049440882216101, 0.041186588748011004, 0.053583761341989, 0.017952411616483, 0.046135178442917, 0.033965114634795, 0.062635423334598, 0.034280619139733, 0.050364629090299, 0.05181958288932499, 0.041301022926948996, 0.033803594472127, 0.063439555585383, 0.056778752037695, 0.053716600310358006, 0.073614813431365, 0.054666598514230995, 0.051933265774557, 0.033092675326302, 0.034810760486028, 0.025422284184572003, 0.039402239346594, 0.025438277130348, 0.03840959761149, 0.027541172997191003, 0.035528555165503996, 0.021034753969143002, 0.02792611068085, 0.023499548440497998, 0.0029037263603090002, 0.013276505516595, 0.015163004274678999, -0.0066857567075469995, -0.017513492931037, -0.006117546033582, -0.019473755021907, -0.028069999127582, -0.054519442643073, -0.044162325587706, -0.037980353984527995, -0.064498055542095, -0.056097571591004, -0.059150535977079005, -0.08010466445538701, -0.086715161565955, -0.081855365275534, -0.086534442999374, -0.099283859192597, -0.10257988632892899, -0.10213678441421001, -0.09683715342262, -0.11184020351814099, -0.105868120960132, -0.064737136913066, -0.055190870072494, -0.025949951042132005, -0.017715609868306, -0.034777126415248, -0.025360780912890003, -0.026610476713325, -0.033383854465617, -0.032865821460953, -0.032540678747023, -0.033964716876352996, -0.013992779563323001, -0.030554145236037996, -0.025041490259892, -0.009347635031139, -0.001254571108243, -0.017241885158347, -0.0044200399509840005, -0.012612813349898002, -0.00014713812688899999, 0.008913517029024999, 0.010110440655423, -0.00010396105789399998, -0.004060829747692, -0.005574571854023001, 0.0060938315514509995, -0.002372346989012, 0.020950436174435, -0.010578175781426, -0.008391452320801998, 0.009841892060688, 0.003774775456146, 0.043852909146317995, -0.017434977015217, -0.008733651910047, -0.020534640190911998, -0.022657904356429, -0.038101487936684, -0.026140732608970003, -0.01790347413756, 0.0024873184213379997, -0.010052638532244, -0.012109516439607, -0.028815707456647004, -0.05176013644829099, -0.038081416764951005, -0.022399293823930997, -0.007990551015026999, -0.044065622614585, -0.03710692060477, -0.031668555469221, -0.017845392587761, -0.012368369043006, -0.034757062961570995, -0.035506792616788, -0.057651701387717996, -0.039883901399598, -0.027979424542387003, -0.036758498072859996, -0.052655826528933004, -0.045052786054477996, -0.046847259275115, -0.019784263822044998, -0.03811304565469, -0.04834365724436, -0.029903583399643996, -0.051201687649669, -0.049469681736648, -0.024406074175497, -0.042670980566952, -0.042177417380157, -0.040359191035052006, -0.05575969564983901, -0.046603377277524005, -0.04691828592281, -0.061694568992849995, -0.07160963669543201, -0.057431707972061, -0.04540151288866599, -0.045744421195240005, -0.064134455695026, -0.07453171883436399, -0.04877012276315, -0.044772931734199, -0.05214671264000701, -0.044880341992987, -0.068707117640274, -0.07625984281695301, -0.064091195474237, -0.080634212508227, -0.072267255014897, -0.066870654378155, -0.06748764922049, -0.056980405223662996],
            "sem": [0.022174924201997, 0.021294931980279, 0.0219699239114, 0.020898502470154, 0.019984882339001, 0.019198266267654997, 0.018818612375057, 0.018307801853876, 0.018464534455817003, 0.017422825125546, 0.019384253931031003, 0.018925137625902, 0.018333997424118998, 0.019541895068207003, 0.020382244503923, 0.018679715780544, 0.018501937970622, 0.018835378018417, 0.01880186393514, 0.017392630261169998, 0.018696180831304, 0.017350770134240003, 0.017823806478829, 0.017354229767099997, 0.018630973768979, 0.020540316710088, 0.019135574240771, 0.01968138695621, 0.019635243863515, 0.018658312866677, 0.018501979611777, 0.018814595831225, 0.019432332484523997, 0.019567648365329, 0.019565458240015, 0.018901338219865, 0.020117966049044, 0.019971590301477, 0.018541463336704, 0.020768053029741003, 0.018910701911858, 0.019639369906767, 0.021087969609757, 0.021414909294466, 0.020320598512028998, 0.020509680672053998, 0.019471721198412, 0.020223120703451, 0.019923994285404, 0.020150484695478, 0.020922610452632998, 0.021638056979688, 0.020631429501518, 0.02144874449087, 0.019845602557494, 0.018331375546218998, 0.019845579678496, 0.020277805044367003, 0.020617480581141004, 0.021020498582482, 0.021205131736531997, 0.019232797081294, 0.018383537838738, 0.019305973502851004, 0.019045782805139, 0.019983419788167, 0.021023675746099, 0.019567123739735, 0.020339852068751, 0.022286337017164, 0.023102038974287004, 0.023580851311191003, 0.022297879858666003, 0.023551789548546, 0.022671862947623, 0.024192951739133002, 0.024329217232969, 0.024774261276648998, 0.026772541677361, 0.027763525413318998, 0.026097660135792004, 0.024711046895833, 0.025721310078453997, 0.024281228864218997, 0.023932294751503998, 0.025440297987036, 0.024931106845878, 0.023299514320682002, 0.023095952707194, 0.025429125666959998, 0.024014940316261002, 0.024757313626367995, 0.024993531661567002, 0.025932545089786003, 0.026282997344547, 0.026365695109676002, 0.027119890609241002, 0.027406385689407, 0.028506166371432003, 0.029363184268247, 0.032000124246056, 0.031626500270245, 0.032303819991681, 0.03502410873172, 0.038051121865013, 0.03899421386059201, 0.037444777875577005, 0.038347014828404996, 0.039286522541853997, 0.038809132858287, 0.040173016862711, 0.039078732787848, 0.037952703365812, 0.036280590053917004, 0.03647967346850901, 0.034079943101482, 0.032890328686794, 0.032433101002553, 0.031054440380337996, 0.03123032964937, 0.031133975112147997, 0.031120487569382006, 0.031540075582707994, 0.031648061373028995, 0.0326225523149, 0.030700864828338, 0.031053453165948996, 0.030761694265908, 0.030753612864705, 0.029169269783426002, 0.029568983360793, 0.029226260291927996, 0.028167959660152998, 0.028829005437194, 0.027981630276076003, 0.027374181822169996, 0.0284819995681, 0.027192830048221, 0.029693730936155, 0.027104607136732004, 0.026440926226044, 0.026657358913281002, 0.027423148242287, 0.025759634218392006, 0.02558981166375, 0.027313666461309, 0.026550187638441004, 0.025363435912601998, 0.02572400109094, 0.024142083181911, 0.023284333123462998, 0.023913610138685, 0.024712312365028997, 0.024644981528329, 0.023807288705467996, 0.021607877849233997, 0.021184251151172003, 0.021994722668085002, 0.020664112828857, 0.023326562491032002, 0.024383745972957, 0.024948426049956, 0.024827925290215998, 0.023788043801346997, 0.024527311796177998, 0.025171081212709997, 0.022020335287266, 0.023687120710177003, 0.021087321185828, 0.021159135226465, 0.020737514608808, 0.021606375515805, 0.021271216650056997, 0.02009463166835, 0.021717489663507998, 0.021228290573196, 0.019250968227042, 0.019165750963081, 0.019840755627784, 0.018795520364575, 0.021145197951531, 0.019015396873839, 0.019627959055785, 0.020351976248052, 0.020036921145293998, 0.019891334017855, 0.019489091366155, 0.018933996708055, 0.018829064135766002, 0.019468585450106, 0.020489299615275, 0.021785984900909997, 0.019991796118853003, 0.019308628721089, 0.020730612948911997, 0.019953739610645, 0.021160178276655, 0.020562363983498002, 0.021752484952531997, 0.022958397823873]
        },
        "block3" : {
            "mean": [0.066243021983764, 0.059877139384092996, 0.041648180410482, 0.041886184889897, 0.034327453979313, 0.064708484693686, 0.05595942405131, 0.068863939410703, 0.04463174208833099, 0.052986756782099007, 0.041334626629428, 0.057198227605256, 0.042464157651581, 0.03447915417433701, 0.033169899262117, 0.030500373264526003, 0.016295363469709997, 0.075490824949637, 0.065106236807586, 0.086191288963847, 0.081277077640196, 0.034357406040468996, 0.041532305227252, 0.043898855739388995, 0.04580775048713099, 0.038068683109582, 0.025195363689759998, 0.028483050284298997, 0.010666101551556999, 0.035821799683716, 0.038097043896887, 0.054301018356446, 0.074320281968197, 0.06144173253846, 0.057809649553652, 0.043189158490104, 0.05567475468039599, 0.039725616955954, 0.054694092465995, 0.020660978073733998, 0.030123532170125, 0.024608232124293, 0.043926954541539, 0.020681802770623002, 0.023218718691471, 0.039809168463725, 0.027345272694933, 0.021376441117384997, 0.025137847643393996, 0.050233657634822, 0.024707504817449, 0.028224047655064997, 0.036756964425115, 0.051503166694688, 0.032924175893201, 0.036899359421056, 0.004181271817282, 0.030031155492945997, 0.033349437714554, 0.016179466965946996, -0.005108993813637001, 0.027048688927602996, 0.044654612229034, 0.020307717194422002, 0.020206397958843002, 0.024306146499676003, 0.035858545874482, 0.025827522084739, 0.041678388679777, 0.025856551268253, 0.027629820845845, 0.020320529509775, 0.040359971717579005, 0.043080560103550006, 0.026446949623743, 0.010959303458015, 0.007852649972625, 0.022414932597934, -0.002342386346845, -0.009050400064166, 0.0058285577381290005, -0.014155508491508002, -0.021487833467192, -0.0028563810045759996, 0.031981286797911, 0.005811122572374001, 0.013847605570295, -0.028869422789455, -0.002860403119502, -0.004037810739867, -0.010987377427950999, 0.00037993078838199993, -0.010374525167496, -0.016548324917673, -0.03410933660613, -0.065498799346943, -0.046184199706306, -0.033852224516906004, -0.061709494344190007, -0.090503787231157, -0.078402089144655, -0.075722793404112, -0.057250399630967994, -0.044338607053233, -0.08478071265463902, -0.097229345923821, -0.09885593677706402, -0.020978688032393996, -0.020632134851222002, -0.017620105724268, 0.019271712524012, -0.029704257355492994, -0.010961770184663001, -0.042280660619613, -0.015395244975978998, -0.020383754022294996, -0.009574847856716, -0.013308165197641, 0.014242156716530001, 0.003112644493828, 0.011967633209066998, 0.012222843305228997, 0.012012881199902, -0.010293458728931998, 0.012706837812593, 6.57745969085567e-05, 0.004454671272021, -0.0019101817366829997, -0.00443114802132, -0.010085047258258002, -0.036534709048158996, -0.034632254511886, -0.008939155426382, -0.044212116158594, -0.00103044335253, -0.039035563662154, -0.056537586847375, -0.015474778496547, -0.044619520942882004, -0.023556200194437, -0.070149420345317, -0.034481144396243994, -0.046151474506275, -0.045175367765798, -0.029456228718802997, -0.029478213120186003, -0.029597598210012, -0.036676543082207, -0.058303500694869996, -0.06054616751632799, -0.076820447455455, -0.031374070626605, -0.067766377677654, 0.006495140478027, -0.03474789308990701, -0.038269770380488996, -0.0287279271196, -0.042065973237768, -0.005010852056066, -0.011013919481099, -0.060311728501707, -0.05003767762898, -0.054222248629880995, -0.059064575251297, -0.038785719968524, -0.039306423542965, -0.017046414462184998, -0.036327947987640996, -0.0034474514149290003, -0.045826469843129006, -0.013745041857405, -0.033720631604277004, -0.017677916603216, -0.017963294414643, -0.016919134406457, 0.0015766166762360002, -0.0353824691857, -0.0006811799649199999, 0.019135567176725, 0.023629144038054998, -0.00383230237487, -0.018310090490883, -0.031513292447497, -0.004317951626531, -0.024212353813812003, 0.0044503219566199995, -0.012003085053466998, -0.023004280492528003, -0.027949334336831, -0.025135242487223, -0.064516520402169, -0.004701163328984, -0.006243970383694001, -0.05420129949332599, -0.024488535689379, -0.03439097065672, 0.021165731714248, 0.00178246407582, 0.0007577983096260001, 0.013037383519943999],
            "sem": [0.030995294968741, 0.028947384263618, 0.029120001488547997, 0.029173821214202006, 0.026931054404482003, 0.0259016848749, 0.02617669794865, 0.02572482313554, 0.027280917118058995, 0.026285852071307004, 0.026189951056724996, 0.025682039799179997, 0.026153984752664998, 0.025696574473578, 0.025208880027026002, 0.023734693512346, 0.023889752600976002, 0.023899891695719, 0.02493825210055, 0.025080787317056, 0.02472063480403, 0.025613426339906, 0.024154818088402, 0.026023439125982997, 0.025493114540623, 0.022886178304877998, 0.024252503718992003, 0.021905399867912, 0.022567907345265002, 0.022960999774156998, 0.022703505376840998, 0.025872342351968, 0.023320188370627003, 0.024671258398934, 0.026726474154972, 0.024800423810347003, 0.023625596609573998, 0.0246333436076, 0.023393489733168, 0.023705799490269, 0.026096689894827003, 0.022442717495015, 0.023617409575650998, 0.023482983047546, 0.026164256475157, 0.021445945754036, 0.023535944604070002, 0.023247032294119, 0.026107301472741002, 0.027361624760639, 0.023952246945384996, 0.025322170345452005, 0.028109473561942, 0.025238637353304002, 0.024570725386446, 0.026184763672392995, 0.024672794771697995, 0.023088772497637, 0.026382484983207, 0.024695899334837002, 0.025585542006011, 0.024133926099439998, 0.024374023401803, 0.025278970836628, 0.023086293478695997, 0.0256914955073, 0.025094838854265, 0.027872448334682002, 0.026984537665664, 0.028644992564495, 0.026887541836412003, 0.026914936453627004, 0.027440621509154002, 0.027934658026057997, 0.030548478784617996, 0.029533522994749997, 0.029333362425297, 0.030922349431151998, 0.030703605306867995, 0.028177589879217004, 0.027064110751967997, 0.028265153980663, 0.026529538486783997, 0.027978404003783, 0.026862049029311, 0.028312408571955, 0.030056746531915, 0.029220095619297, 0.028236010748905, 0.028958030972896, 0.029060059170774, 0.028026928581692995, 0.029298057280328, 0.031071210990657, 0.029789189361592004, 0.028045836565582002, 0.031685797873261, 0.03431335430515799, 0.03529151462387, 0.036168926849282995, 0.040528414780701, 0.040334434827063996, 0.040724468861418, 0.043249313646222, 0.046023680971605994, 0.05170996232870201, 0.052918085782670994, 0.049563627557167, 0.047515756217404996, 0.045479197651614005, 0.04438996712494, 0.041771365691521005, 0.039504338836481, 0.04062449257093, 0.040493641770662996, 0.039392190864696, 0.041745803154394995, 0.03851199732339199, 0.037768262677851, 0.03816107160618899, 0.036245604599514, 0.034362841426860004, 0.034674991459622, 0.036063083772344996, 0.034681121643847, 0.035574274602344004, 0.03387069397511, 0.034145193348145, 0.033492403545371, 0.028562346602792003, 0.030384729134913, 0.029276020084063, 0.029214509671428, 0.029858740702967998, 0.030277555639628997, 0.030375308019947995, 0.029313523609240003, 0.026539738344773, 0.026519955364266, 0.027586939880036, 0.02799815364554, 0.028040361915513998, 0.026998299551974, 0.028852117432130002, 0.032104640294769, 0.03026876560043, 0.030385845576767004, 0.029316629929898, 0.030261794191044, 0.031214943334046, 0.029399194523687, 0.030438369799724998, 0.029503424740817002, 0.031343290001884995, 0.032984535340363, 0.029759033810563, 0.030944841935611, 0.032191538383812, 0.03038377718774, 0.03358503409408, 0.036477818034575, 0.031723744908876, 0.03595130689591299, 0.034154404274816, 0.028118249028453998, 0.031721642870552, 0.029426022004067, 0.030372016068764, 0.0305872836325, 0.028886824284087, 0.029822775542675, 0.028282774885008, 0.028538811411278002, 0.02847641727953, 0.028405006695204, 0.029362485717224, 0.028293835152598, 0.025676482379274, 0.029010014594769998, 0.028782631399892, 0.030288928732251, 0.030421760160021, 0.031263201234489, 0.030885969722072002, 0.030399674471898997, 0.030385538577854, 0.029907855901105, 0.032242008957192, 0.031036900907526, 0.029516902877689, 0.030610645352785, 0.030145525483964, 0.030329002771971997, 0.030405402589538, 0.030094615876136002, 0.031003098124357996, 0.032065741710866, 0.032465907136842005, 0.032471592400176004, 0.031064732642364]
        }
    } 

    for key in d.keys():
        plt.plot(list(df.index), d[key]["mean"], label=key)
        """difference_1 = [d[key]["mean"][idx] - d[key]["sem"][idx] for idx,i in enumerate(d[key]["mean"])]
        difference_2 = [d[key]["mean"][idx] + d[key]["sem"][idx] for idx,i in enumerate(d[key]["mean"])]
        plt.fill_between(list(df.index), difference_1, difference_2)"""

    plt.title(f"Z-Score of Averaged dF/F Traces Per Block")
    plt.locator_params(axis="x", nbins=20)
    plt.xlabel("Time (s)")
    plt.ylabel("Z-Score")
    plt.legend()
    out_path = "/media/rory/Padlock_DT/BLA_Analysis/Results/avg_across_blocks_w_sem_rdtd1.png"
    plt.savefig(out_path)
    plt.close()


if __name__ == "__main__":
    main()
